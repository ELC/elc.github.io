<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Ezequiel Leonardo Castaño Personal Website - Ezequiel Leonardo Castaño</title><link>https://elc.github.io/</link><description>Ezequiel Leonardo Castaño Personal Website - In this website you will find post about christianity, programming and math</description><lastBuildDate>Sat, 04 Sep 2021 00:00:00 -0300</lastBuildDate><item><title>Secure Live Collaboration in Jupyter Lab</title><link>https://elc.github.io/posts/jupyter-collaborative</link><description>&lt;p&gt;&lt;a href="/blog/images/jupyter-collaborative/jupyter-collaborative-headerimage.png"&gt;&lt;img alt="Jupyter Publishing Header Image" class="b-lazy" data-src="/blog/images/jupyter-collaborative/jupyter-collaborative-headerimage.png" src="https://elc.github.io/blog/images/jupyter-collaborative/jupyter-collaborative-headerimage-thumbnail.png" width="1444"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;The single most requested feature for Jupyter Notebooks/Lab was live
collaboration &lt;em&gt;á la Google Docs&lt;/em&gt;. Today, this is possible but should be done
with caution, since it gives access to the whole internet to run any (including
malicious) code on our local PC. This is a quick guide to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezequiel Leonardo Castaño</dc:creator><pubDate>Sat, 04 Sep 2021 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:elc.github.io,2021-09-04:/posts/jupyter-collaborative</guid><category>Programming</category><category>Jupyter</category><category>security</category><category>Ngrok</category><category>collaboration</category></item><item><title>Jupyter Publishing Guide: From Embedded to Book</title><link>https://elc.github.io/posts/jupyter-publishing</link><description>&lt;p&gt;&lt;a href="/blog/images/jupyter-publishing/jupyter-publishing-headerimage.png"&gt;&lt;img alt="Jupyter Publishing Header Image" class="b-lazy" data-src="/blog/images/jupyter-publishing/jupyter-publishing-headerimage.png" src="https://elc.github.io/blog/images/jupyter-publishing/jupyter-publishing-headerimage-thumbnail.png" width="1444"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Jupyter Notebooks are the lingua franca for Data Science. There is hardly any
data scientist that has never used this IDE. However, in contrast to its
popularity and usefulness, the process of sharing a Jupyter Notebook is not
straightforward. This article presents a brief survey of the different
publishing solutions …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezequiel Leonardo Castaño</dc:creator><pubDate>Mon, 16 Aug 2021 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:elc.github.io,2021-08-16:/posts/jupyter-publishing</guid><category>Programming</category><category>Jupyter</category><category>Colab</category><category>Python</category><category>Notebooks</category><category>Binder</category><category>LaTeX</category></item><item><title>Lyrics Presentation Generator</title><link>https://elc.github.io/posts/online-lyrics-presentation-generator</link><description>&lt;!-- Status: draft --&gt;

&lt;p&gt;&lt;a class="gallery" href="/blog/images/online-lyrics/online-lyrics-headerimage.png"&gt;&lt;img alt="Online Lyrics Presentation Generator Header Image" class="b-lazy" data-src="/blog/images/online-lyrics/online-lyrics-headerimage.png" src="https://elc.github.io/blog/images/online-lyrics/online-lyrics-headerimage-thumbnail.png" width="1920"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;More often than not I find myself writing power point presentations for Lyrics. This usually happens in the youth service at church and in christian camps. Since the process is quite repetitive and simple enough I consider developing a web app to generate this presentations automatically. In this article I …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezequiel Leonardo Castaño</dc:creator><pubDate>Wed, 22 May 2019 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:elc.github.io,2019-05-22:/posts/online-lyrics-presentation-generator</guid><category>Christianity</category><category>Christian</category><category>WebApp</category><category>Presentation</category><category>Lyrics</category></item><item><title>Embed Interactive Jupyter Notebooks in Static Websites for Free</title><link>https://elc.github.io/posts/embed-interactive-notebooks</link><description>&lt;p&gt;&lt;a class="gallery" href="/blog/images/embed_interactive_notebooks/embed-interactive-notebooks_headerimage.png"&gt;&lt;img alt="Embed Interactive Notebooks Logo" class="b-lazy" data-src="/blog/images/embed_interactive_notebooks/embed-interactive-notebooks_headerimage.png" src="https://elc.github.io/blog/images/embed_interactive_notebooks/embed-interactive-notebooks_headerimage-thumbnail.png" width="1401"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;After a lot of research on the internet, I found no practical tutorial explaining how to embed Jupyter Notebooks in Static Websites using only free technologies. I found a way to do it using Github Gists, MyBinder and NBInteract along with IPython Widgets and I want to share it so …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezequiel Leonardo Castaño</dc:creator><pubDate>Wed, 01 May 2019 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:elc.github.io,2019-05-01:/posts/embed-interactive-notebooks</guid><category>Programming</category><category>Python</category><category>Jupyter</category><category>NBinteract</category><category>Static Website</category></item><item><title>Introductory Guide to Git with Visual Interface</title><link>https://elc.github.io/posts/git-guide-with-visual-interface</link><description>&lt;p&gt;&lt;a class="gallery" href="/blog/images/git-guide-with-visual-interface/git-guide-with-visual-interface-headerimage.png"&gt;&lt;img alt="Git Tutorial Header Image" class="b-lazy" data-src="/blog/images/git-guide-with-visual-interface/git-guide-with-visual-interface-headerimage.png" src="https://elc.github.io/blog/images/git-guide-with-visual-interface/git-guide-with-visual-interface-headerimage-thumbnail.png" width="2000"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;As a Systems Engineering student, on successive occasions, I came across version control systems (VCS for short), sometimes from subjects related to programming and other in subjects related to software engineering.&lt;/p&gt;
&lt;p&gt;Remembering that when I had to learn all these concepts (especially how Git works), I went through several difficulties …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezequiel Leonardo Castaño</dc:creator><pubDate>Wed, 24 Apr 2019 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:elc.github.io,2019-04-24:/posts/git-guide-with-visual-interface</guid><category>Software Engineer</category><category>Git</category><category>GUI</category><category>GitKraken</category></item><item><title>Multi-Floor Elevator Simulation with AnyLogic</title><link>https://elc.github.io/posts/multi-floor-elevator-simulation-anylogic</link><description>&lt;!-- Status: draft --&gt;

&lt;p&gt;&lt;a class="gallery" href="/blog/images/elevator-simulation/elevator-simulation-headerimage.png"&gt;&lt;img alt="Elevator Header Image" class="b-lazy" data-src="/blog/images/elevator-simulation/elevator-simulation-headerimage.png" src="https://elc.github.io/blog/images/elevator-simulation/elevator-simulation-headerimage-thumbnail.png" width="1920"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;In my 4th year of University I had what would become one of my favorite courses, Simulation, where, as a final project, each student (or team of students) should choose a real problematic situation and create a simulation model (with AnyLogic). I choose something I was familiar with, the never-ending …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezequiel Leonardo Castaño</dc:creator><pubDate>Sat, 06 Apr 2019 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:elc.github.io,2019-04-06:/posts/multi-floor-elevator-simulation-anylogic</guid><category>Simulation</category><category>Simulation</category><category>Programming</category><category>Math</category><category>AnyLogic</category></item><item><title>Ordinary Differential Equations (ODE) with Python</title><link>https://elc.github.io/posts/ordinary-differential-equations-with-python</link><description>&lt;p&gt;&lt;a class="gallery" href="/blog/images/ode-python/ordinary-differential-equations-with-python-headerimage.png"&gt;&lt;img alt="ODE Header Image" class="b-lazy" data-src="/blog/images/ode-python/ordinary-differential-equations-with-python-headerimage.png" src="https://elc.github.io/blog/images/ode-python/ordinary-differential-equations-with-python-headerimage-thumbnail.png" width="1333"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;When I was at my 3rd year of University I have a complete subject about Ordinary Differential Equations and other similar topics. For that course we used Wolfram Mathematica throughout the year and I asked the teacher whether I can do it with Python, here you can see the results …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezequiel Leonardo Castaño</dc:creator><pubDate>Tue, 29 Jan 2019 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:elc.github.io,2019-01-29:/posts/ordinary-differential-equations-with-python</guid><category>Simulation</category><category>Simulation</category><category>Math</category><category>Python</category><category>Scipy</category><category>ODE</category></item><item><title>Time Tables Visualization - Finding Patterns</title><link>https://elc.github.io/posts/times-tables</link><description>&lt;p&gt;&lt;a class="gallery" href="/blog/images/times_tables/times-tables-headerimage.png"&gt;&lt;img alt="Times Table Header Image" class="b-lazy" data-src="/blog/images/times_tables/times-tables-headerimage.png" src="https://elc.github.io/blog/images/times_tables/times-tables-headerimage-thumbnail.png" width="1120"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;After looking to a Mathologer Video about a beautiful pattern emerged from time tables, I decided to use it as a challenge and write a script to do the same with Python. Animations Included!&lt;/p&gt;


&lt;p&gt;First, let's introduce the video I mentioned, in this video a very nice patterns emerges in …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezequiel Leonardo Castaño</dc:creator><pubDate>Tue, 22 Jan 2019 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:elc.github.io,2019-01-22:/posts/times-tables</guid><category>Data Visualization</category><category>Data Visualization</category><category>Programming</category><category>Math</category></item><item><title>Pascal Triangle and Genetic Algorithm - A Visualization</title><link>https://elc.github.io/posts/pascal-triangle-vs-genetic-algorithm</link><description>

&lt;p&gt;Inspired by a Wikipedia article, I replicate a way to visualize the Pascal Triangle and used the same approach in Genetic Algorithms&lt;/p&gt;


&lt;p&gt;Once I came accross this &lt;a href="https://en.wikipedia.org/wiki/Pascal%27s_triangle" target="_blank"&gt;wikipedia article about Pascal Triangle&lt;/a&gt;, there you can find the following animation:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pascal_triangle_animation" class="narrow" src="https://upload.wikimedia.org/wikipedia/commons/6/66/Pascal%27s_Triangle_animated_binary_rows.gif" width="576"&gt;&lt;/p&gt;
&lt;p&gt;I found it interesting to replicate this very animation in Python …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezequiel Leonardo Castaño</dc:creator><pubDate>Mon, 21 Jan 2019 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:elc.github.io,2019-01-21:/posts/pascal-triangle-vs-genetic-algorithm</guid><category>Data Visualization</category><category>Data Visualization</category><category>Python</category><category>Matplotlib</category><category>Animation</category></item><item><title>Juegos Bíblicos para Jóvenes y Adolescentes</title><link>https://elc.github.io/posts/juegos-biblicos/es</link><description>

&lt;p&gt;Compilado de juegos bíblicos listos para imprimir. Pensados y adaptados para jóvenes y adolescentes que buscan conocer más a Dios.&lt;/p&gt;


&lt;p&gt;EDICIÓN 2020.18.15: Ya está disponible la &lt;a href="/link/tabu-biblico-web"&gt;app web para el Tabú Bíblico&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;En el pasado yo siempre tuve una mirada despectiva de los juegos, pensé que eran innecesarios …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezequiel Leonardo Castaño</dc:creator><pubDate>Fri, 28 Dec 2018 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:elc.github.io,2018-12-28:/posts/juegos-biblicos/es</guid><category>Christianity</category><category>Christian</category><category>Games</category><category>Bible</category></item><item><title>Step by Step Fractals with Python</title><link>https://elc.github.io/posts/plotting-fractals-step-by-step-with-python</link><description>&lt;p&gt;&lt;a class="gallery" href="/blog/images/fractals/factals_headerimage.png"&gt;&lt;img alt="Fractals Header Image" class="b-lazy" data-src="/blog/images/fractals/factals_headerimage.png" src="https://elc.github.io/blog/images/fractals/factals_headerimage-thumbnail.png" width="1920"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Fractals are awesome, they are built with very complex pattern and they allow you to zoom in forever! In this post we will see how easily it is to plot several kinds of fractals using a tool called L-Systems and the Python Turtle module for the step to step plotting …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezequiel Leonardo Castaño</dc:creator><pubDate>Sun, 04 Nov 2018 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:elc.github.io,2018-11-04:/posts/plotting-fractals-step-by-step-with-python</guid><category>Programming</category><category>Python</category><category>Fractals</category><category>Turtle</category></item><item><title>Configuring FastAI with Google Colab</title><link>https://elc.github.io/posts/fastai-colab-deep-learning</link><description>&lt;p&gt;&lt;a class="gallery" href="/blog/images/fast-colab-deep-learning/fast-colab-deep-learning_headerimage.png"&gt;&lt;img alt="FastAi Header Image" class="b-lazy" data-src="/blog/images/fast-colab-deep-learning/fast-colab-deep-learning_headerimage.png" src="https://elc.github.io/blog/images/fast-colab-deep-learning/fast-colab-deep-learning_headerimage-thumbnail.png" width="1246"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Nowadays there are lots of tutorials and material to learn Artificial Inteligence, Machine Learning and Deep Learning but whenever you want to do something interesting you notice you need a Nvidia GPU. In this tutorial we are going to solve this issue with a free cloud solution.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;EDIT: this post …&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezequiel Leonardo Castaño</dc:creator><pubDate>Fri, 28 Sep 2018 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:elc.github.io,2018-09-28:/posts/fastai-colab-deep-learning</guid><category>Programming</category><category>Python</category><category>FastAI</category><category>deep-learning</category><category>Jupyter Notebooks</category><category>Colab</category></item><item><title>Create one executable file for a Flask app with PyInstaller</title><link>https://elc.github.io/posts/executable-flask-pyinstaller</link><description>&lt;p&gt;&lt;a class="gallery" href="/blog/images/flask_pyinstaller/flask-pyinstaller_headerimage.png"&gt;&lt;img alt="Flask_pyinstaller_logo" class="b-lazy" data-src="/blog/images/flask_pyinstaller/flask-pyinstaller_headerimage.png" src="https://elc.github.io/blog/images/flask_pyinstaller/flask-pyinstaller_headerimage-thumbnail.png" width="1401"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EDIT 2019.05.03:&lt;/strong&gt; The content order was change and the ideas were express more succinctly.&lt;/p&gt;


&lt;p&gt;Having a single executable file could be a great advantage in so many cases and nowadays more a more desktop applications are using web technologies (React Native, Cordova, Ionic, etc.). It was time for …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezequiel Leonardo Castaño</dc:creator><pubDate>Sat, 24 Feb 2018 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:elc.github.io,2018-02-24:/posts/executable-flask-pyinstaller</guid><category>Programming</category><category>Python</category><category>Flask</category><category>PyInstaller</category></item><item><title>Haskell pattern matching in Python</title><link>https://elc.github.io/posts/haskell-pattern-matching-in-python</link><description>&lt;p&gt;&lt;a class="gallery" href="/blog/images/haskell_python/haskell_python_headerimage.png"&gt;&lt;img alt="Haskell Header Image" class="b-lazy" data-src="/blog/images/haskell_python/haskell_python_headerimage.png" src="https://elc.github.io/blog/images/haskell_python/haskell_python_headerimage-thumbnail.png" width="1371"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;I started to learn a bit of Haskell and one of its features amazed me: Pattern Matching. Then, unexpectably, I notice Python 3 have them too but with a different name: Extended Tuple Unpacking. Okay, it's not exactly the same but you can get quite similar functionalities if you master …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezequiel Leonardo Castaño</dc:creator><pubDate>Sun, 18 Feb 2018 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:elc.github.io,2018-02-18:/posts/haskell-pattern-matching-in-python</guid><category>Programming</category><category>Haskell</category><category>Python</category><category>Tuple Unpacking</category></item></channel></rss>